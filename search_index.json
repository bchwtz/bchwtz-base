[["index.html", "Statistics Einführung", " Statistics Benjamin Buchwitz 2021-05-12 Einführung Figure 0.1: Download Slides "],["grundlegende-begriffe.html", "Kapitel 1 Grundlegende Begriffe", " Kapitel 1 Grundlegende Begriffe Figure 1.1: Download Slides "],["begriff-der-häufigkeit.html", "Kapitel 2 Begriff der Häufigkeit", " Kapitel 2 Begriff der Häufigkeit Figure 2.1: Download Slides "],["maßzahlen.html", "Kapitel 3 Maßzahlen", " Kapitel 3 Maßzahlen Figure 3.1: Download Slides "],["zweidimensionale-verteilungen.html", "Kapitel 4 Zweidimensionale Verteilungen", " Kapitel 4 Zweidimensionale Verteilungen Figure 4.1: Download Slides "],["kombinatorik.html", "Kapitel 5 Kombinatorik", " Kapitel 5 Kombinatorik Figure 5.1: Download Slides "],["wahrscheinlichkeitsrechnung.html", "Kapitel 6 Wahrscheinlichkeitsrechnung", " Kapitel 6 Wahrscheinlichkeitsrechnung Figure 6.1: Download Slides "],["anwendungen-der-wahrscheinlichkeitsrechnung.html", "Kapitel 7 Anwendungen der Wahrscheinlichkeitsrechnung", " Kapitel 7 Anwendungen der Wahrscheinlichkeitsrechnung Figure 7.1: Download Slides "],["wahrscheinlichkeitsverteilungen.html", "Kapitel 8 Wahrscheinlichkeitsverteilungen", " Kapitel 8 Wahrscheinlichkeitsverteilungen "],["spezielle-verteilungen.html", "Kapitel 9 Spezielle Verteilungen", " Kapitel 9 Spezielle Verteilungen "],["von-der-stichprobe-zur-grundgesamtheit.html", "Kapitel 10 Von der Stichprobe zur Grundgesamtheit", " Kapitel 10 Von der Stichprobe zur Grundgesamtheit "],["lineare-regression.html", "Kapitel 11 Lineare Regression", " Kapitel 11 Lineare Regression "],["multiple-regression.html", "Kapitel 12 Multiple Regression", " Kapitel 12 Multiple Regression "],["zeitreihenanalyse.html", "Kapitel 13 Zeitreihenanalyse", " Kapitel 13 Zeitreihenanalyse "],["daten.html", "Kapitel 14 Daten 14.1 Taxi Trips 14.2 Hauspreise 14.3 Human Ressources", " Kapitel 14 Daten 14.1 Taxi Trips 14.1.1 Vorbereitungen library(geodist) library(osrm) # load raw data coursepath &lt;- &quot;~/sciebo/courses/bchwtz-stat&quot; filepath &lt;- &quot;nongit/data/2021-taxi/nyctaxi.csv&quot; savepath &lt;- &quot;data&quot; d &lt;- read.csv(file.path(coursepath, filepath)) # select a subset of the data n &lt;- 10000 set.seed(20210408) d &lt;- d[sample(nrow(d), size = n), ] # Function to make points dataframe make_pts &lt;- function(x){ pts &lt;- data.frame(long = c(x[&quot;pickup_longitude&quot;], x[&quot;dropoff_longitude&quot;]), lat = c(x[&quot;pickup_latitude&quot;], x[&quot;dropoff_latitude&quot;]), row.names = NULL) return(pts) } # Function to request route information from openstreetmap make_dist_duration &lt;- function(x, type=c(&quot;car&quot;,&quot;bike&quot;,&quot;foot&quot;)[1]){ pts &lt;- make_pts(x) route &lt;- osrm::osrmRoute(loc=pts, returnclass = &quot;sf&quot;, osrm.profile = type) return(c(osrm_distance=route$dist, osrm_duration=route$duration)) } # Funtion to calculate geodesic_distance make_geodesic_distance &lt;- function(x){ pickup_loc &lt;- c(longitude=x[&quot;pickup_longitude&quot;], latitude=x[&quot;pickup_latitude&quot;]) dropoff_loc &lt;- c(longitude=x[&quot;dropoff_longitude&quot;], latitude=x[&quot;dropoff_latitude&quot;]) geodesic_distance &lt;- geodist::geodist(x=pickup_loc, y=dropoff_loc, measure = &quot;geodesic&quot;) return(geodesic_distance) } # Getting route information involves an external server and needs to be batched # so that it does not time out mb &lt;- 15 # microbatch size f &lt;- rep((1:ceiling(nrow(d)/mb)), each=mb)[1:nrow(d)] # splitkey dlist &lt;- split(d, f) for (idx in 1:length(dlist)){ batch &lt;- dlist[[idx]] # Generate route information and add to dataset try({ res &lt;- apply(batch, MARGIN=1, make_dist_duration) df &lt;- cbind(batch, t(res)) # Add day of the week to dataset df$weekday &lt;- weekdays(as.Date(df$pickup_datetime)) # Add geodesic distance to dataset df$geodesic_distance &lt;- apply(df, MARGIN=1, make_geodesic_distance) # caching: export to csv filename &lt;- paste0(&quot;cache_&quot;,idx,&quot;-2021_fhswf_stat_taxi.csv&quot;) write.csv(df, file = file.path(coursepath,savepath,filename), row.names = FALSE) }) Sys.sleep(runif(1,1,mb)) message(idx) } files &lt;- list.files(file.path(coursepath,savepath), pattern = &quot;^cache*&quot;, full.names = T) length(files) flist &lt;- lapply(files, read.csv) df &lt;- do.call(&quot;rbind&quot;, flist) # write final csv write.csv(df, file = file.path(coursepath,savepath,&quot;2021_fhswf_stat_taxi.csv&quot;), row.names = FALSE) # delete cache files unlink(files) 14.1.2 Datenbeschreibung Variablen id: a unique identifier for each trip vendor_id: a code indicating the provider associated with the trip record pickup_datetime: date and time when the meter was engaged dropoff_datetime: date and time when the meter was disengaged passenger_count: the number of passengers in the vehicle (driver entered value) pickup_longitude: the longitude where the meter was engaged pickup_latitude: the latitude where the meter was engaged dropoff_longitude: the longitude where the meter was disengaged dropoff_latitude: the latitude where the meter was disengaged store_and_fwd_flag: This flag indicates whether the trip record was held in vehicle memory before sending to the vendor because the vehicle did not have a connection to the server - Y=store and forward; N=not a store and forward trip trip_duration: duration of the trip in seconds Ergänzte Variablen osrm_distance: the travel distance by car in kilometers as calculated by the Open Streetmap Routing Machine osrm_duration: the estimated duration for travelling the route by car in minutes as estimated by the Open Streetmap Routing Machine geodesic_distance: the geodesic distance in meters between the pickup and dropoff coordinates calculated using the method of Karney (2013) weekday: the day of the week when the trip was started 14.1.3 Daten laden # load the data x &lt;- read.csv(&quot;https://bchwtz.github.io/bchwtz-stat/data/2021_fhswf_stat_taxi.csv&quot;) 14.1.4 Quellen https://www.kaggle.com/c/nyc-taxi-trip-duration/ https://www1.nyc.gov/site/tlc/about/tlc-trip-record-data.page 14.2 Hauspreise 14.2.1 Vorbereitungen library(tidyverse) # load raw data coursepath &lt;- &quot;~/sciebo/courses/bchwtz-stat&quot; filepath &lt;- &quot;nongit/data/2021-housing/germany_housing.csv&quot; savepath &lt;- &quot;data&quot; d &lt;- read.csv(file.path(coursepath, filepath)) # rename columns and select relevant ones d &lt;- d %&gt;% rename( id = X, price = Price, type = Type, living_space = Living_space, lot_size = Lot, additional_area = Usable_area, availability = Free_of_Relation, rooms = Rooms, bedrooms = Bedrooms, bathrooms = Bathrooms, floors = Floors, year_construction = Year_built, year_modernization = Year_renovated, condition = Condition, heating = Heating, facility_quality = Furnishing_quality, energy_source = Energy_source, energy_certificate = Energy_certificate, energy_certificate_type = Energy_certificate_type, energy_consumption = Energy_consumption, energy_efficiency_class = Energy_efficiency_class, state = State, district = City, city = Place, parking_lot = Garages, parking_lot_type = Garagetype ) %&gt;% select(-availability) # export to csv write.csv(d, file = file.path(coursepath,savepath,&quot;2021_fhswf_stat_housing.csv&quot;), row.names = FALSE) 14.2.2 Datenbeschreibung id: a unique identifier for each offer price: the requested price in Euro to buy the building type: the type of the offered building living_space: the size of the usable living space in the building in square meters lot_size: the size of the associated lot in square meters additional_area: the size of the additionally available area in square meters that is not qualified living space due to legal reasons rooms: the total number of rooms in the building bedrooms: the number of bedrooms in the building bathrooms: the number of bathrooms in the building floors: number of storys in the building year_construction: the year in which the building was first constructed year_modernization: the year in which the building was lastly renovated facility_quality: an indication of quality of the installed fixtures, facilities and if applicable furniture condition: the general condition of the building and facilities heating: the primary technology for heating the building energy_source: the primary source of energy for heating and warm water energy_certificate: an indication wheter and energy consumption certificate is required and/or available energy_certificate_type: the type of the available energy certification energy_consumption: the required amount of energy in \\(kWh/m^2\\) per year to heat the building energy_efficiency_class: an indication of the quality of the thermal insulation of the building according to the german EnEV, ranging from A+ (best) to H (worst) state: the federal state of germany in which the building is located district: the respective district of the federal stat in which the building is located city: the name of the city to whom the building is allocated parking_lot: the amount of registered parking lots that belong to the building parking_lot_type: the type of the available parking lots 14.2.3 Daten laden # load the data x &lt;- read.csv(&quot;https://bchwtz.github.io/bchwtz-stat/data/2021_fhswf_stat_housing.csv&quot;) 14.2.4 Quellen https://www.kaggle.com/scriptsultan/german-house-prices 14.3 Human Ressources 14.3.1 Vorbereitungen # load raw data coursepath &lt;- &quot;~/sciebo/courses/bchwtz-stat&quot; filepath &lt;- &quot;nongit/data/2021-hr/HRDataset_v14.csv&quot; savepath &lt;- &quot;data&quot; d &lt;- read.csv(file.path(coursepath, filepath)) # harmonize variable names names(d) &lt;- gsub(&quot;_&quot;,&quot;&quot;,names(d)) # export to csv write.csv(d, file = file.path(coursepath,savepath,&quot;2021_fhswf_stat_hr.csv&quot;), row.names = FALSE) 14.3.2 Datenbeschreibung EmployeeName: Employee’s full name EmpID: Employee ID is unique to each employee MarriedID: Is the person married (1 or 0 for yes or no) MaritalStatusID: Marital status code that matches the text field MaritalDesc EmpStatusID: Employment status code that matches text field EmploymentStatus DeptID Department: ID code that matches the department the employee works in PerfScoreID: Performance Score code that matches the employee’s most recent performance score FromDiversityJobFairID: Was the employee sourced from the Diversity job fair? 1 or 0 for yes or no PayRate: The person’s hourly pay rate. All salaries are converted to hourly pay rate Termd: Has this employee been terminated - 1 or 0 PositionID: An integer indicating the person’s position Position: The text name/title of the position the person has State: The state that the person lives in Zip: The zip code for the employee DOB: Date of Birth for the employee Sex: Sex - M or F MaritalDesc: The marital status of the person (divorced, single, widowed, separated, etc) CitizenDesc: Label for whether the person is a Citizen or Eligible NonCitizen HispanicLatino: Yes or No field for whether the employee is Hispanic/Latino RaceDesc: Description/text of the race the person identifies with DateofHire: Date the person was hired DateofTermination: Date the person was terminated, only populated if, in fact, Termd = 1 TermReason: A text reason / description for why the person was terminated EmploymentStatus: A description/category of the person’s employment status. Anyone currently working full time = Active Department: Name of the department that the person works in ManagerName: The name of the person’s immediate manager ManagerID: A unique identifier for each manager RecruitmentSource: The name of the recruitment source where the employee was recruited from PerformanceScore: Performance Score text/category (Fully Meets, Partially Meets, PIP, Exceeds) EngagementSurvey: Results from the last engagement survey, managed by our external partner EmpSatisfaction: A basic satisfaction score between 1 and 5, as reported on a recent employee satisfaction survey SpecialProjectsCount: The number of special projects that the employee worked on during the last 6 months LastPerformanceReviewDate: The most recent date of the person’s last performance review DaysLateLast30: The number of times that the employee was late to work during the last 30 days Absences: The number of times the employee was absent from work 14.3.3 Daten laden # load the data x &lt;- read.csv(&quot;https://bchwtz.github.io/bchwtz-stat/data/2021_fhswf_stat_hr.csv&quot;) 14.3.4 Quellen https://www.kaggle.com/rhuebner/human-resources-data-set https://rpubs.com/rhuebner/hr_codebook_v14 "],["evaluation.html", "Evaluation", " Evaluation stats_ss2021 &lt;- tribble( ~date, ~vg, ~g, ~n, ~b, ~vb, ~total, &quot;07.04.2021&quot;,45,71,7,0,0,128, &quot;12.04.2021&quot;,24,63,10,0,0,119, &quot;14.04.2021&quot;,34,55,20,0,0,118, &quot;19.04.2021&quot;,15,54,12,2,0,97, &quot;26.04.2021&quot;,17,42,8,2,1,99, &quot;28.04.2021&quot;,55,38,13,1,0,115, &quot;05.05.2021&quot;,23,37,13,1,0,110 ) evcnames&lt;- c(&quot;Datum&quot;,&quot;sehr zufrieden&quot;, &quot;zufrieden&quot;, &quot;weder zufrieden noch unzufrieden&quot;, &quot;unzufrieden&quot;, &quot;sehr unzufrieden&quot;, &quot;anwesend&quot;) kable(stats_ss2021, booktabbs=T, col.names = evcnames) Datum sehr zufrieden zufrieden weder zufrieden noch unzufrieden unzufrieden sehr unzufrieden anwesend 07.04.2021 45 71 7 0 0 128 12.04.2021 24 63 10 0 0 119 14.04.2021 34 55 20 0 0 118 19.04.2021 15 54 12 2 0 97 26.04.2021 17 42 8 2 1 99 28.04.2021 55 38 13 1 0 115 05.05.2021 23 37 13 1 0 110 "],["system-info.html", "System Info", " System Info Sys.time() ## [1] &quot;2021-05-12 08:28:32 UTC&quot; sessionInfo() ## R version 4.0.5 (2021-03-31) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Catalina 10.15.7 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] kableExtra_1.3.4 knitr_1.33 forcats_0.5.1 stringr_1.4.0 ## [5] dplyr_1.0.6 purrr_0.3.4 readr_1.4.0 tidyr_1.1.3 ## [9] tibble_3.1.1 ggplot2_3.3.3 tidyverse_1.3.1 ## ## loaded via a namespace (and not attached): ## [1] tidyselect_1.1.1 xfun_0.22 haven_2.4.1 colorspace_2.0-1 ## [5] vctrs_0.3.8 generics_0.1.0 viridisLite_0.4.0 htmltools_0.5.1.1 ## [9] yaml_2.2.1 utf8_1.2.1 rlang_0.4.11 pillar_1.6.0 ## [13] glue_1.4.2 withr_2.4.2 DBI_1.1.1 dbplyr_2.1.1 ## [17] modelr_0.1.8 readxl_1.3.1 lifecycle_1.0.0 munsell_0.5.0 ## [21] gtable_0.3.0 cellranger_1.1.0 rvest_1.0.0 evaluate_0.14 ## [25] ps_1.6.0 fansi_0.4.2 highr_0.9 broom_0.7.6 ## [29] Rcpp_1.0.6 scales_1.1.1 backports_1.2.1 webshot_0.5.2 ## [33] jsonlite_1.7.2 systemfonts_1.0.2 fs_1.5.0 hms_1.0.0 ## [37] digest_0.6.27 stringi_1.6.1 bookdown_0.22 grid_4.0.5 ## [41] cli_2.5.0 tools_4.0.5 magrittr_2.0.1 crayon_1.4.1 ## [45] pkgconfig_2.0.3 ellipsis_0.3.2 xml2_1.3.2 reprex_2.0.0 ## [49] lubridate_1.7.10 svglite_2.0.0 assertthat_0.2.1 rmarkdown_2.8 ## [53] httr_1.4.2 rstudioapi_0.13 R6_2.5.0 compiler_4.0.5 "]]
